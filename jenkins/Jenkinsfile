pipeline {
    agent any

    environment {
        MODELSIM_HOME = 'C:\\modeltech64_10.6d\\win64'
        GIT_PATH = 'C:\\Users\\martin\\AppData\\Local\\Programs\\Git\\bin\\git.exe'
    }

    stages {
        stage('Cleanup') {
            steps {
                script {
                    // Remove existing directory if it exists
                    bat 'if exist "%WORKSPACE%\\QTMP_VCU" rd /s /q "%WORKSPACE%\\QTMP_VCU"'
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    // Use the full path to Git executable to clone the repository
                    bat """
                    "%GIT_PATH%" clone https://github.com/MNMenendez/QTMP_VCU.git
                    """
                }
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    // List files to verify presence
                    bat "dir %WORKSPACE%\\QTMP_VCU"
                }
            }
        }

        stage('Setup') {
            steps {
                script {
                    echo "ModelSim Home: ${env.MODELSIM_HOME}"
                }
            }
        }

        stages {
        stage('Compile VHDL') {
            steps {
                script {
                    // Define the ModelSim executable path and commands
                    def vsimExe = "${env.MODELSIM_HOME}/vsim.exe"
                    def command = "\"${vsimExe}\" -c -do \"vlib work; vcom -2008 -work work source/*.vhdl; vcom -2008 -work work testbenches/*.vhdl\""
                    
                    // Run the command
                    bat(script: command, returnStatus: true)
                }
            }
        }

        stage('Run Simulation') {
            steps {
                script {
                    bat """
                    echo Running simulation...
                    cd /d "%WORKSPACE%\\QTMP_VCU"
                    "%MODELSIM_HOME%\\vsim.exe" -c -do "run -all; quit"
                    """
                }
            }
        }

        stage('Archive Results') {
            steps {
                archiveArtifacts artifacts: '**/test_results.log', allowEmptyArchive: true
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
        success {
            echo 'Tests passed successfully!'
        }
        failure {
            echo 'Tests failed. Please check the logs.'
        }
    }
}
