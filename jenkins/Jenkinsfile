pipeline {
    agent any

    environment {
        MODELSIM_HOME = 'C:\\modeltech64_10.6d\\win64'
        GIT_PATH = 'C:\\Users\\martin\\AppData\\Local\\Programs\\Git\\bin\\git.exe'
        TOP_LEVEL_ENTITY = 'and_gate'
        TEST_RESULTS_XML = 'test_results.xml'  // JUnit XML file
        CONVERT_SCRIPT = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\convert_to_junit_xml.py'
    }

    stages {
        stage('Cleanup') {
            steps {
                script {
                    // Remove all files and folders in the workspace
                    bat 'if exist "%WORKSPACE%" rd /s /q "%WORKSPACE%"'
                }
            }
        }

        stage('Initialize') {
            steps {
                script {
                    // Initialize Git repository if not already initialized
                    bat '''
                    if not exist ".git" (
                        echo Repository not initialized. Cloning repository...
                        "%GIT_PATH%" clone https://github.com/MNMenendez/QTMP_VCU.git .
                    ) else (
                        echo Repository already initialized. Pulling latest changes...
                        "%GIT_PATH%" fetch --all
                        "%GIT_PATH%" reset --hard origin/main
                        "%GIT_PATH%" pull
                    )
                    '''
                }
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    // List files to verify the directory structure
                    bat 'dir'
                }
            }
        }

        stage('Setup') {
            steps {
                script {
                    echo "ModelSim Home: ${env.MODELSIM_HOME}"
                }
            }
        }

        stage('Compile VHDL') {
            steps {
                script {
                    def vsimExe = "${env.MODELSIM_HOME}/vsim.exe"
                    def compileCommand = "\"${vsimExe}\" -c -do \"vlib work; vcom -2008 -work work source/*.vhdl; vcom -2008 -work work testbenches/*.vhdl\""
                    bat(script: "${compileCommand}", returnStatus: true)
                }
            }
        }

        stage('Run Simulation') {
            steps {
                script {
                    def vsimExe = "${env.MODELSIM_HOME}/vsim.exe"
                    def simulationCommand = "\"${vsimExe}\" -c -do \"vsim work.${env.TOP_LEVEL_ENTITY}; run -all; quit\""
                    
                    // Run the simulation and redirect output to simulation.log
                    bat(script: "${simulationCommand} > simulation.log", returnStatus: true)
                    
                    // Verify if simulation.log is created and list its contents
                    bat 'dir simulation.log'
                    bat 'type simulation.log'
                    
                    // Convert simulation results to JUnit XML
                    bat "python ${env.CONVERT_SCRIPT} simulation.log ${env.TEST_RESULTS_XML}"
                }
            }
        }

        stage('Archive Results') {
            steps {
                archiveArtifacts artifacts: 'test_results.xml', allowEmptyArchive: true
            }
        }

        stage('Publish Test Results') {
            steps {
                publishTestResults testResults: [[reportFiles: 'test_results.xml']]
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
        success {
            echo 'Tests passed successfully!'
        }
        failure {
            echo 'Tests failed. Please check the logs.'
        }
    }
}
