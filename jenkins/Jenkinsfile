pipeline {
    agent any

    environment {
        GIT_PATH = 'C:\\Users\\martin\\AppData\\Local\\Programs\\Git\\bin\\git.exe'
        TOP_LEVEL_ENTITY = 'hcmt_cpld_top'
        TEST_RESULTS_XML = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\QTMP_VCU\\simulation_results.xml'
        CONVERT_SCRIPT = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\convert_to_junit_xml.py'
        MODELSIM_PATH = 'C:\\modeltech64_10.6d\\win64'
        SCRIPT_PATH = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\scripts'
        SIM_LOG_FILE = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\QTMP_VCU.sim\\sim_1\\behav\\xsim\\simulate.log'
        GCC_PATH = 'C:\\MinGW\\bin'  // Updated GCC path
    }

    stages {
        stage('Create Project') {
            steps {
                script {
                    echo "Cleaning up workspace..."
                    bat '''
                    echo Deleting old files...
                    del /q %WORKSPACE%\\*.*
                    echo Deleting old directories...
                    for /d %%p in (%WORKSPACE%\\*) do rd /s /q "%%p"
                    '''
                    
                    echo "Initializing repository..."
                    bat '''
                    if not exist ".git" (
                        echo Repository not initialized. Cloning repository...
                        "%GIT_PATH%" clone https://github.com/MNMenendez/QTMP_VCU.git .
                    ) else (
                        echo Repository already initialized. Checking out branch and pulling latest changes...
                        "%GIT_PATH%" fetch --all
                        "%GIT_PATH%" checkout main || "%GIT_PATH%" checkout -b main
                        "%GIT_PATH%" reset --hard origin/main
                        "%GIT_PATH%" pull origin main
                    )
                    '''
                    
                    echo "Verifying files in workspace..."
                    bat 'dir'
                    bat 'dir "C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\source"'
                    bat 'dir "C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\testbenches"'
                    
                    echo "ModelSim Path: ${env.MODELSIM_PATH}"
                    
                    // Update PATH to include GCC path
                    bat "set PATH=%GCC_PATH%;%PATH%"
                    
                    echo "Creating ModelSim project..."
                    bat """
                    "%MODELSIM_PATH%\\vlib work
                    """
                }
            }
        }

        stage('Run Simulation and Test Results') {
            steps {
                script {
                    echo "Running ModelSim simulation and processing results..."
                    
                    // Ensure GCC path is included in the PATH for this stage
                    bat "set PATH=%GCC_PATH%;%PATH%"

                    // Run the simulation
                    bat """
                    "%MODELSIM_PATH%\\vsim" -c -do "run -all; quit;" -log ${env.SIM_LOG_FILE}
                    """

                    // Add a short delay to ensure the file is completely written
                    sleep(time: 10, unit: 'SECONDS')

                    // Check if simulation results XML file exists
                    if (fileExists("${env.TEST_RESULTS_XML}")) {
                        echo "Simulation results XML file found: ${env.TEST_RESULTS_XML}"
                        
                        // Convert the simulation results XML to JUnit XML format
                        echo "Converting simulation results to JUnit XML..."
                        bat "python ${env.CONVERT_SCRIPT} ${env.SIM_LOG_FILE} ${env.TEST_RESULTS_XML}"
                        
                        // Archive the JUnit XML test results
                        echo "Archiving test results..."
                        archiveArtifacts artifacts: "${env.TEST_RESULTS_XML}", allowEmptyArchive: true
                        
                        // Publish the JUnit XML test results
                        echo "Publishing test results..."
                        junit '**/${env.TEST_RESULTS_XML}'
                    } else {
                        echo "ERROR: Simulation results XML file not found: ${env.TEST_RESULTS_XML}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Run Synthesis') {
            steps {
                script {
                    echo "Running ModelSim synthesis..."
                    // Ensure GCC path is included in the PATH for this stage
                    bat "set PATH=%GCC_PATH%;%PATH%"
                    bat """
                    "%MODELSIM_PATH%\\vlib work
                    """
                }
            }
        }

        stage('Run Implementation') {
            steps {
                script {
                    echo "Running ModelSim implementation..."
                    // Ensure GCC path is included in the PATH for this stage
                    bat "set PATH=%GCC_PATH%;%PATH%"
                    bat """
                    "%MODELSIM_PATH%\\vlib work
                    """
                }
            }
        }

        stage('Generate Bitstream') {
            steps {
                script {
                    echo "Generating bitstream with ModelSim..."
                    // Ensure GCC path is included in the PATH for this stage
                    bat "set PATH=%GCC_PATH%;%PATH%"
                    bat """
                    "%MODELSIM_PATH%\\vlib work
                    """
                }
            }
        }

        stage('Release Bitfile') {
            steps {
                script {
                    echo "Releasing bitfile..."
                    bat '''
                    set PROJ_NAME=QTMP_VCU
                    set RELEASE_DIR=C:\\path\\to\\release\\directory
  
                    set BASE_NAME=%PROJ_NAME%-%DATE:~-4%-%DATE:~4,2%-%DATE:~7,2%-%TIME:~0,2%-%TIME:~3,2%
                    set BITFILE=%BASE_NAME%.bit
                    set INFOFILE=%BASE_NAME%.txt
  
                    git log -n 1 --pretty=format:"%H" >> %INFOFILE%
                    echo -n " %PROJ_NAME% " >> %INFOFILE%
                    git describe --all >> %INFOFILE%
  
                    echo "" >> %INFOFILE%
                    echo "Submodules:" >> %INFOFILE%
                    git submodule status >> %INFOFILE%
  
                    copy %INFOFILE% %RELEASE_DIR%
                    copy modeltech64\\%PROJ_NAME%.runs\\impl_1\\top.bit %RELEASE_DIR%\\%BITFILE%
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
        success {
            echo 'Tests passed successfully!'
        }
        failure {
            echo 'Tests failed. Please check the logs.'
        }
    }
}
