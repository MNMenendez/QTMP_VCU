pipeline {
    agent any

    environment {
        MODELSIM_HOME = 'C:\\modeltech64_10.6d\\win64'
        GIT_PATH = 'C:\\Users\\martin\\AppData\\Local\\Programs\\Git\\bin\\git.exe'
        TOP_LEVEL_ENTITY = 'hcmt_cpld_top'
        TEST_RESULTS_XML = 'test_results.xml'
        CONVERT_SCRIPT = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\convert_to_junit_xml.py'
    }

    stages {
        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up workspace..."
                    bat '''
                    echo Deleting old files...
                    del /q %WORKSPACE%\\*.*
                    echo Deleting old directories...
                    for /d %%p in (%WORKSPACE%\\*) do rd /s /q "%%p"
                    '''
                }
            }
        }

        stage('Initialize') {
            steps {
                script {
                    echo "Initializing repository..."
                    bat '''
                    if not exist ".git" (
                        echo Repository not initialized. Cloning repository...
                        "%GIT_PATH%" clone https://github.com/MNMenendez/QTMP_VCU.git .
                    ) else (
                        echo Repository already initialized. Checking out branch and pulling latest changes...
                        "%GIT_PATH%" fetch --all
                        "%GIT_PATH%" checkout main || "%GIT_PATH%" checkout -b main
                        "%GIT_PATH%" reset --hard origin/main
                        "%GIT_PATH%" pull origin main
                    )
                    '''
                }
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    echo "Verifying files in workspace..."
                    bat 'dir'
                    bat 'dir "C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\source"'
                    bat 'dir "C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\testbenches"'
                }
            }
        }

        stage('Setup') {
            steps {
                script {
                    echo "ModelSim Home: ${env.MODELSIM_HOME}"
                }
            }
        }

        stage('Compile VHDL') {
            steps {
                script {
                    def sourceDir = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\source'
                    def testbenchesDir = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\ART_QTMP\\testbenches'

                    echo "Running VHDL compilation..."

                    // Get all source files
                    def sourceFiles = powershell(script: """
                        Get-ChildItem -Path '${sourceDir}' -Filter '*.vhdl' | 
                        Select-Object -ExpandProperty FullName
                    """, returnStdout: true).trim().split('\r?\n')

                    if (sourceFiles) {
                        sourceFiles.each { file ->
                            echo "Compiling source file: ${file}"
                            def result = bat(script: "\"${env.MODELSIM_HOME}\\vsim.exe\" -c -do \"vlib work; vcom -2008 -work work \\\"${file}\\\"\"", returnStatus: true, returnStdout: true).trim()
                            echo "Compilation output:\n${result}"
                            if (result.contains("Error")) {
                                error "Compilation of source file ${file} failed"
                            }
                        }
                    } else {
                        echo "No source files found in ${sourceDir}"
                    }

                    // Get all testbench files
                    def testbenchFiles = powershell(script: """
                        Get-ChildItem -Path '${testbenchesDir}' -Filter '*.vhdl' | 
                        Select-Object -ExpandProperty FullName
                    """, returnStdout: true).trim().split('\r?\n')

                    if (testbenchFiles) {
                        testbenchFiles.each { file ->
                            echo "Compiling testbench file: ${file}"
                            def result = bat(script: "\"${env.MODELSIM_HOME}\\vsim.exe\" -c -do \"vcom -2008 -work work \\\"${file}\\\"\"", returnStatus: true, returnStdout: true).trim()
                            echo "Compilation output:\n${result}"
                            if (result.contains("Error")) {
                                error "Compilation of testbench file ${file} failed"
                            }
                        }
                    } else {
                        echo "No testbench files found in ${testbenchesDir}"
                    }
                }
            }
        }

        stage('Run Simulation') {
            steps {
                script {
                    def vsimExe = "${env.MODELSIM_HOME}/vsim.exe"
                    def simulationCommand = "\"${vsimExe}\" -c -do \"vsim work.${env.TOP_LEVEL_ENTITY}; run -all; quit\""
                    
                    echo "Running simulation command: ${simulationCommand}"
                    bat(script: "${simulationCommand} > simulation.log", returnStatus: true)
                    
                    // Verify if simulation.log is created and list its contents
                    bat 'dir simulation.log'
                    bat 'type simulation.log'
                    
                    // Convert simulation results to JUnit XML
                    bat "python ${env.CONVERT_SCRIPT} simulation.log ${env.TEST_RESULTS_XML}"
                }
            }
        }

        stage('Archive Results') {
            steps {
                archiveArtifacts artifacts: "${env.TEST_RESULTS_XML}", allowEmptyArchive: true
            }
        }

        stage('Publish Test Results') {
            steps {
                junit '**/${env.TEST_RESULTS_XML}'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
        success {
            echo 'Tests passed successfully!'
        }
        failure {
            echo 'Tests failed. Please check the logs.'
        }
    }
}
